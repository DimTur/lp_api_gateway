basePath: /
definitions:
  authhandler.CheckOTPAndLogInResponse:
    properties:
      accsessToken:
        type: string
      error:
        type: string
      refreshToken:
        type: string
      status:
        type: string
    type: object
  authhandler.SingInByTgResponse:
    properties:
      error:
        type: string
      info:
        type: string
      status:
        type: string
      success:
        type: boolean
    type: object
  authhandler.SingInResponse:
    properties:
      accsessToken:
        type: string
      error:
        type: string
      refreshToken:
        type: string
      status:
        type: string
    type: object
  authhandler.SingUpResponse:
    properties:
      error:
        type: string
      status:
        type: string
      success:
        type: boolean
    type: object
  authhandler.UpdateUserInfoReq:
    properties:
      email:
        type: string
      is_admin:
        type: boolean
      name:
        type: string
      tg_link:
        type: string
    type: object
  authhandler.UpdateUserInfoResponse:
    properties:
      error:
        type: string
      status:
        type: string
      success:
        type: boolean
    type: object
  channelshandler.CreateChannelRequest:
    properties:
      description:
        type: string
      learning_group_id:
        type: string
      name:
        type: string
    required:
    - learning_group_id
    - name
    type: object
  channelshandler.CreateChannelResponse:
    properties:
      channel_id:
        type: integer
      error:
        type: string
      status:
        type: string
    type: object
  channelshandler.DeleteChannelResponse:
    properties:
      error:
        type: string
      status:
        type: string
      success:
        type: boolean
    type: object
  channelshandler.GetChannelResponse:
    properties:
      channel:
        $ref: '#/definitions/lpmodels.GetChannelResponse'
      error:
        type: string
      status:
        type: string
    type: object
  channelshandler.GetChannelsResponse:
    properties:
      channels:
        items:
          $ref: '#/definitions/lpmodels.Channel'
        type: array
      error:
        type: string
      status:
        type: string
    type: object
  channelshandler.ShareChannelRequest:
    properties:
      lgroup_ids:
        items:
          type: string
        type: array
    required:
    - lgroup_ids
    type: object
  channelshandler.ShareChannelResponse:
    properties:
      error:
        type: string
      status:
        type: string
      success:
        type: boolean
    type: object
  channelshandler.UpdateChannelRequest:
    properties:
      description:
        type: string
      name:
        type: string
    type: object
  learninggrouphandler.CreateLGroupResponse:
    properties:
      error:
        type: string
      status:
        type: string
      success:
        type: boolean
    type: object
  learninggrouphandler.CreateLearningGroupRequest:
    properties:
      name:
        maxLength: 100
        minLength: 3
        type: string
    required:
    - name
    type: object
  learninggrouphandler.DeleteLGroupResponse:
    properties:
      error:
        type: string
      status:
        type: string
      success:
        type: boolean
    type: object
  learninggrouphandler.GetLearningGroupsResponse:
    properties:
      error:
        type: string
      learningGroups:
        $ref: '#/definitions/ssomodels.GetLGroupsResp'
      status:
        type: string
    type: object
  learninggrouphandler.GetLgByIDResponse:
    properties:
      error:
        type: string
      learningGroup:
        $ref: '#/definitions/ssomodels.GetLgByIDResp'
      status:
        type: string
    type: object
  learninggrouphandler.UpdateLGroupResponse:
    properties:
      error:
        type: string
      status:
        type: string
      success:
        type: boolean
    type: object
  learninggrouphandler.UpdateLearningGroupRequest:
    properties:
      group_admins:
        items:
          type: string
        type: array
      learners:
        items:
          type: string
        type: array
      name:
        type: string
    type: object
  lessonshandler.CreateLessonRequest:
    properties:
      description:
        type: string
      name:
        type: string
    required:
    - name
    type: object
  lessonshandler.CreateLessonResponse:
    properties:
      error:
        type: string
      lesson_id:
        type: integer
      status:
        type: string
    type: object
  lessonshandler.DeleteLessonResponse:
    properties:
      error:
        type: string
      status:
        type: string
      success:
        type: boolean
    type: object
  lessonshandler.GetLessonResponse:
    properties:
      error:
        type: string
      lesson:
        $ref: '#/definitions/lpmodels.GetLessonResponse'
      status:
        type: string
    type: object
  lessonshandler.GetLessonsResponse:
    properties:
      error:
        type: string
      lessons:
        items:
          $ref: '#/definitions/lpmodels.GetLessonResponse'
        type: array
      status:
        type: string
    type: object
  lessonshandler.UpdateLessonRequest:
    properties:
      description:
        type: string
      name:
        type: string
    type: object
  lessonshandler.UpdateLessonResponse:
    properties:
      error:
        type: string
      status:
        type: string
      updateLessonResponse:
        $ref: '#/definitions/lpmodels.UpdateLessonResponse'
    type: object
  lpmodels.Channel:
    properties:
      createdAt:
        type: string
      createdBy:
        type: string
      description:
        type: string
      id:
        type: integer
      lastModifiedBy:
        type: string
      modified:
        type: string
      name:
        type: string
    type: object
  lpmodels.GetChannelResponse:
    properties:
      createdAt:
        type: string
      createdBy:
        type: string
      description:
        type: string
      id:
        type: integer
      lastModifiedBy:
        type: string
      modified:
        type: string
      name:
        type: string
      plans:
        items:
          $ref: '#/definitions/lpmodels.Plan'
        type: array
    type: object
  lpmodels.GetLessonResponse:
    properties:
      createdAt:
        type: string
      createdBy:
        type: string
      description:
        type: string
      id:
        type: integer
      lastModifiedBy:
        type: string
      modified:
        type: string
      name:
        type: string
    type: object
  lpmodels.GetPlanResponse:
    properties:
      createdAt:
        type: string
      createdBy:
        type: string
      description:
        type: string
      id:
        type: integer
      isPublished:
        type: boolean
      lastModifiedBy:
        type: string
      modified:
        type: string
      name:
        type: string
      public:
        type: boolean
    type: object
  lpmodels.Plan:
    properties:
      createdAt:
        type: string
      createdBy:
        type: string
      description:
        type: string
      id:
        type: integer
      isPublished:
        type: boolean
      lastModifiedBy:
        type: string
      modified:
        type: string
      name:
        type: string
      public:
        type: boolean
    type: object
  lpmodels.UpdateLessonResponse:
    properties:
      id:
        type: integer
      success:
        type: boolean
    type: object
  lpmodels.UpdatePlanResponse:
    properties:
      id:
        type: integer
      success:
        type: boolean
    type: object
  planshandler.CreatePlanRequest:
    properties:
      description:
        type: string
      learning_group_id:
        type: string
      name:
        type: string
    required:
    - learning_group_id
    - name
    type: object
  planshandler.CreatePlanResponse:
    properties:
      error:
        type: string
      plan_id:
        type: integer
      status:
        type: string
    type: object
  planshandler.DeletePlanResponse:
    properties:
      error:
        type: string
      status:
        type: string
      success:
        type: boolean
    type: object
  planshandler.GetPlanResponse:
    properties:
      error:
        type: string
      plan:
        $ref: '#/definitions/lpmodels.GetPlanResponse'
      status:
        type: string
    type: object
  planshandler.GetPlansResponse:
    properties:
      error:
        type: string
      plans:
        items:
          $ref: '#/definitions/lpmodels.GetPlanResponse'
        type: array
      status:
        type: string
    type: object
  planshandler.SharePlanRequest:
    properties:
      user_ids:
        items:
          type: string
        type: array
    required:
    - user_ids
    type: object
  planshandler.SharePlanResponse:
    properties:
      error:
        type: string
      status:
        type: string
      success:
        type: boolean
    type: object
  planshandler.UpdatePlanRequest:
    properties:
      description:
        type: string
      is_published:
        type: boolean
      name:
        type: string
      public:
        type: boolean
    type: object
  planshandler.UpdatePlanResponse:
    properties:
      error:
        type: string
      status:
        type: string
      updatePlanResponse:
        $ref: '#/definitions/lpmodels.UpdatePlanResponse'
    type: object
  response.Response:
    properties:
      error:
        type: string
      status:
        type: string
    type: object
  ssomodels.CheckOTPAndLogIn:
    properties:
      code:
        type: string
      email:
        type: string
    required:
    - code
    - email
    type: object
  ssomodels.GetLGroupsResp:
    properties:
      learningGroups:
        items:
          $ref: '#/definitions/ssomodels.LearningGroup'
        type: array
    type: object
  ssomodels.GetLgByIDResp:
    properties:
      createdBy:
        type: string
      groupAdmins:
        items:
          $ref: '#/definitions/ssomodels.GroupAdmins'
        type: array
      id:
        type: string
      learners:
        items:
          $ref: '#/definitions/ssomodels.Learner'
        type: array
      modifiedBy:
        type: string
      name:
        type: string
    type: object
  ssomodels.GroupAdmins:
    properties:
      email:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  ssomodels.Learner:
    properties:
      email:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  ssomodels.LearningGroup:
    properties:
      created:
        type: string
      createdBy:
        type: string
      id:
        type: string
      modifiedBy:
        type: string
      name:
        type: string
      updated:
        type: string
    type: object
  ssomodels.LogIn:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  ssomodels.LogInViaTg:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  ssomodels.RegisterUser:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
host: localhost:8000
info:
  contact:
    name: API Support
  description: The project is only in its initial stages.
  title: Learning Platform API
  version: 0.1.0
paths:
  /channels:
    get:
      consumes:
      - application/json
      description: This endpoint returns channels information relevant for user.
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/channelshandler.GetChannelsResponse'
        "400":
          description: Invalid data in the request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Channels not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Get channels information
      tags:
      - channels
    post:
      consumes:
      - application/json
      description: This endpoint allows users to create a new channel with the specified
        data.
      parameters:
      - description: Channel creation parameters
        in: body
        name: channelshandler.CreateChannelRequest
        required: true
        schema:
          $ref: '#/definitions/channelshandler.CreateChannelRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/channelshandler.CreateChannelResponse'
        "400":
          description: Invalid data in the request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Create a new channel
      tags:
      - channels
  /channels/{channel_id}/plans/{plan_id}:
    delete:
      consumes:
      - application/json
      description: This endpoint allows plan id and delete it.
      parameters:
      - description: ID of the channel
        in: path
        name: channel_id
        required: true
        type: integer
      - description: ID of the plan
        in: path
        name: plan_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/planshandler.DeletePlanResponse'
        "400":
          description: Invalid data in the request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Plan not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete plan by id
      tags:
      - plans
    get:
      consumes:
      - application/json
      description: This endpoint returns plan information by ID.
      parameters:
      - description: ID of the channel
        in: path
        name: channel_id
        required: true
        type: integer
      - description: ID of the plan
        in: path
        name: plan_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/planshandler.GetPlanResponse'
        "400":
          description: Invalid data in the request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Plan not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Get plan information
      tags:
      - plans
    patch:
      consumes:
      - application/json
      description: This endpoint allows plan id and update it.
      parameters:
      - description: ID of the channel
        in: path
        name: channel_id
        required: true
        type: integer
      - description: ID of the plan
        in: path
        name: plan_id
        required: true
        type: integer
      - description: Plan updating parameters
        in: body
        name: planshandler.UpdatePlanRequest
        required: true
        schema:
          $ref: '#/definitions/planshandler.UpdatePlanRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/planshandler.UpdatePlanResponse'
        "400":
          description: Invalid data in the request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Plan not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Update channel by id
      tags:
      - plans
  /channels/{channel_id}/plans/{plan_id}/lessons:
    get:
      consumes:
      - application/json
      description: This endpoint returns lessons information relevant for user.
      parameters:
      - description: ID of the channel
        in: path
        name: channel_id
        required: true
        type: integer
      - description: ID of the plan
        in: path
        name: plan_id
        required: true
        type: integer
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/lessonshandler.GetLessonsResponse'
        "400":
          description: Invalid data in the request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Get all lessons relevant for user
      tags:
      - lessons
    post:
      consumes:
      - application/json
      description: This endpoint allows users to create a new lesson with the specified
        data.
      parameters:
      - description: ID of the channel
        in: path
        name: channel_id
        required: true
        type: integer
      - description: ID of the plan
        in: path
        name: plan_id
        required: true
        type: integer
      - description: Lesson creation parameters
        in: body
        name: lessonshandler.CreateLessonRequest
        required: true
        schema:
          $ref: '#/definitions/lessonshandler.CreateLessonRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/lessonshandler.CreateLessonResponse'
        "400":
          description: Invalid data in the request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Create a new lesson
      tags:
      - lessons
  /channels/{channel_id}/plans/{plan_id}/lessons/{lesson_id}:
    delete:
      consumes:
      - application/json
      description: This endpoint allows lesson id and delete it.
      parameters:
      - description: ID of the channel
        in: path
        name: channel_id
        required: true
        type: integer
      - description: ID of the plan
        in: path
        name: plan_id
        required: true
        type: integer
      - description: ID of the lesson
        in: path
        name: lesson_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/lessonshandler.DeleteLessonResponse'
        "400":
          description: Invalid data in the request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Lesson not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete lesson by id
      tags:
      - lessons
    get:
      consumes:
      - application/json
      description: This endpoint returns lesson information by ID.
      parameters:
      - description: ID of the channel
        in: path
        name: channel_id
        required: true
        type: integer
      - description: ID of the plan
        in: path
        name: plan_id
        required: true
        type: integer
      - description: ID of the lesson
        in: path
        name: lesson_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/lessonshandler.GetLessonResponse'
        "400":
          description: Invalid data in the request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Lesson not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Get lesson information
      tags:
      - lessons
    patch:
      consumes:
      - application/json
      description: This endpoint allows lesson id and update it.
      parameters:
      - description: ID of the channel
        in: path
        name: channel_id
        required: true
        type: integer
      - description: ID of the plan
        in: path
        name: plan_id
        required: true
        type: integer
      - description: ID of the lesson
        in: path
        name: lesson_id
        required: true
        type: integer
      - description: Lesson updating parameters
        in: body
        name: lessonshandler.UpdateLessonRequest
        required: true
        schema:
          $ref: '#/definitions/lessonshandler.UpdateLessonRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/lessonshandler.UpdateLessonResponse'
        "400":
          description: Invalid data in the request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Lesson not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Update lesson by id
      tags:
      - lessons
  /channels/{channel_id}/plans/{plan_id}/share:
    post:
      consumes:
      - application/json
      description: This endpoint allows plan id and user ids and share with.
      parameters:
      - description: Plan shering parameters
        in: body
        name: planshandler.SharePlanRequest
        required: true
        schema:
          $ref: '#/definitions/planshandler.SharePlanRequest'
      - description: ID of the channel
        in: path
        name: channel_id
        required: true
        type: integer
      - description: ID of the plan
        in: path
        name: plan_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/planshandler.SharePlanResponse'
        "400":
          description: Invalid data in the request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Channels not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Share plan by id
      tags:
      - plans
  /channels/{id}:
    delete:
      consumes:
      - application/json
      description: This endpoint allows channel id and delete it.
      parameters:
      - description: ID of the channel
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/channelshandler.DeleteChannelResponse'
        "400":
          description: Invalid data in the request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Channels not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete channel by id
      tags:
      - channels
    get:
      consumes:
      - application/json
      description: This endpoint returns channel information by ID.
      parameters:
      - description: ID of the channel
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/channelshandler.GetChannelResponse'
        "400":
          description: Invalid data in the request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Channel not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Get channel information
      tags:
      - channels
    patch:
      consumes:
      - application/json
      description: This endpoint allows channel id and update it.
      parameters:
      - description: Channels getting parameters
        in: body
        name: channelshandler.UpdateChannelRequest
        required: true
        schema:
          $ref: '#/definitions/channelshandler.UpdateChannelRequest'
      - description: ID of the channel
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/channelshandler.GetChannelResponse'
        "400":
          description: Invalid data in the request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Channels not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Update channel by id
      tags:
      - channels
  /channels/{id}/plans:
    get:
      consumes:
      - application/json
      description: This endpoint returns plans information relevant for user.
      parameters:
      - description: ID of the channel
        in: path
        name: id
        required: true
        type: integer
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/planshandler.GetPlansResponse'
        "400":
          description: Invalid data in the request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Get all plans relevant for user
      tags:
      - plans
    post:
      consumes:
      - application/json
      description: This endpoint allows users to create a new plan with the specified
        data.
      parameters:
      - description: ID of the channel
        in: path
        name: id
        required: true
        type: integer
      - description: Plan creation parameters
        in: body
        name: planshandler.CreatePlanRequest
        required: true
        schema:
          $ref: '#/definitions/planshandler.CreatePlanRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/planshandler.CreatePlanResponse'
        "400":
          description: Invalid data in the request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Create a new plan
      tags:
      - plans
  /channels/{id}/share:
    post:
      consumes:
      - application/json
      description: This endpoint allows channel id and learning group id and share
        with.
      parameters:
      - description: Channels sharing parameters
        in: body
        name: channelshandler.ShareChannelRequest
        required: true
        schema:
          $ref: '#/definitions/channelshandler.ShareChannelRequest'
      - description: ID of the channel
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/channelshandler.ShareChannelResponse'
        "400":
          description: Invalid data in the request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Channels not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Share channel by id
      tags:
      - channels
  /check_otp:
    post:
      consumes:
      - application/json
      description: This endpoint allows users to sign in using their email and sends
        OTP code to chat.
      parameters:
      - description: Sign-in parameters
        in: body
        name: ssomodels.CheckOTPAndLogIn
        required: true
        schema:
          $ref: '#/definitions/ssomodels.CheckOTPAndLogIn'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/authhandler.CheckOTPAndLogInResponse'
        "400":
          description: Invalid data in the request
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/response.Response'
      summary: User Login by telegram bot
      tags:
      - auth
  /learning_group/{id}:
    delete:
      consumes:
      - application/json
      description: This endpoint allows learning group id and delete it.
      parameters:
      - description: ID of the learning group
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/learninggrouphandler.DeleteLGroupResponse'
        "400":
          description: Invalid data in the request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete learning group by id
      tags:
      - learning groups
    get:
      consumes:
      - application/json
      description: This endpoint allows learning group id and returns lg info.
      parameters:
      - description: ID of the learning group
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/learninggrouphandler.GetLgByIDResponse'
        "400":
          description: Invalid data in the request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Get learning group by id
      tags:
      - learning groups
    patch:
      consumes:
      - application/json
      description: This endpoint allows learning group id and update it.
      parameters:
      - description: ID of the learning group
        in: path
        name: id
        required: true
        type: string
      - description: Getting parameters
        in: body
        name: learninggrouphandler.UpdateLearningGroupRequest
        required: true
        schema:
          $ref: '#/definitions/learninggrouphandler.UpdateLearningGroupRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/learninggrouphandler.UpdateLGroupResponse'
        "400":
          description: Invalid data in the request
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Update learning group by id
      tags:
      - learning groups
  /learning_groups:
    get:
      consumes:
      - application/json
      description: This endpoint allows user id and returns all relevant learning
        groups.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/learninggrouphandler.GetLearningGroupsResponse'
        "400":
          description: Invalid data in the request
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Get learning groups relevant for user
      tags:
      - learning groups
    post:
      consumes:
      - application/json
      description: This endpoint allows learning group info and create it.
      parameters:
      - description: Creating parameters
        in: body
        name: learninggrouphandler.CreateLearningGroupRequest
        required: true
        schema:
          $ref: '#/definitions/learninggrouphandler.CreateLearningGroupRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/learninggrouphandler.CreateLGroupResponse'
        "400":
          description: Invalid data in the request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Create a new learning group
      tags:
      - learning groups
  /profile/update_info:
    patch:
      consumes:
      - application/json
      description: This endpoint allow users to change their profile.
      parameters:
      - description: Sign-in parameters
        in: body
        name: authhandler.UpdateUserInfoReq
        required: true
        schema:
          $ref: '#/definitions/authhandler.UpdateUserInfoReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/authhandler.UpdateUserInfoResponse'
        "400":
          description: Invalid data in the request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Change self user info
      tags:
      - auth
  /sing_in:
    post:
      consumes:
      - application/json
      description: This endpoint allows users to sign in using their email and password.
      parameters:
      - description: Sign-in parameters
        in: body
        name: ssomodels.LogIn
        required: true
        schema:
          $ref: '#/definitions/ssomodels.LogIn'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/authhandler.SingInResponse'
        "400":
          description: Invalid data in the request
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/response.Response'
      summary: User Login
      tags:
      - auth
  /sing_in_by_tg:
    post:
      consumes:
      - application/json
      description: This endpoint allows users to sign in using their email and sends
        OTP code to chat.
      parameters:
      - description: Sign-in parameters
        in: body
        name: ssomodels.LogInViaTg
        required: true
        schema:
          $ref: '#/definitions/ssomodels.LogInViaTg'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/authhandler.SingInByTgResponse'
        "400":
          description: Invalid data in the request
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/response.Response'
      summary: User Login by telegram bot
      tags:
      - auth
  /sing_up:
    post:
      consumes:
      - application/json
      description: This endpoint allows users to register with an email and password.
      parameters:
      - description: Registration parameters
        in: body
        name: ssomodels.RegisterUser
        required: true
        schema:
          $ref: '#/definitions/ssomodels.RegisterUser'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/authhandler.SingUpResponse'
        "400":
          description: Invalid data in the request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Register a new user
      tags:
      - auth
security:
- ApiKeyAuth: []
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
